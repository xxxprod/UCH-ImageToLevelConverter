<Window x:Class="UCH_ImageToLevelConverter.Views.LevelEditorView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:UCH_ImageToLevelConverter.ViewModels"
        xmlns:linq="clr-namespace:System.Xml.Linq;assembly=System.Xml.XDocument"
        xmlns:tools="clr-namespace:UCH_ImageToLevelConverter.Tools"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance viewModels:LevelEditorViewModel}"
        Title="Level Editor" Height="650" Width="1000">

    <Window.Resources>
        <Style x:Key="ButtonStyle" TargetType="Button">
            <Style.Setters>
                <Setter Property="Padding" Value="3,1,3,1" />
                <Setter Property="Margin" Value="3" />
            </Style.Setters>
        </Style>
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Style.Setters>
                <Setter Property="Padding" Value="3,1,3,1" />
                <Setter Property="Margin" Value="3" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style.Setters>
        </Style>
        <Style x:Key="NumberTextBoxStyle" BasedOn="{StaticResource TextBoxStyle}"  TargetType="TextBox">
            <Style.Setters>
                <Setter Property="HorizontalContentAlignment" Value="Right" />
            </Style.Setters>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="100" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Grid.ColumnSpan="3" Margin="14">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Label Content="LevelName:" Margin="3"/>
            <TextBox Grid.Column="1" Text="{Binding LevelName.Value}" Style="{DynamicResource TextBoxStyle}"/>
        </Grid>

        <GridSplitter Grid.Column="0" Grid.Row="2" VerticalAlignment="Stretch" Width="5" />
        <GridSplitter Grid.Column="2" Grid.Row="2" VerticalAlignment="Stretch" Width="5" />


        <ScrollViewer Grid.Column="0" Grid.Row="2" Margin="14" VerticalScrollBarVisibility="Auto">
            <StackPanel Orientation="Vertical">
                <UniformGrid Columns="2" VerticalAlignment="Top">

                    <Label Content="Wall Offsets" FontWeight="Bold" />
                    <Label />

                    <Label Content="Left:" />
                    <TextBox Text="{Binding WallOffsetLeft.Value}" Style="{DynamicResource NumberTextBoxStyle}"/>
                    <Label Content="Right:" />
                    <TextBox Text="{Binding WallOffsetRight.Value}" Style="{DynamicResource NumberTextBoxStyle}"/>
                    <Label Content="Top:" />
                    <TextBox Text="{Binding WallOffsetTop.Value}" Style="{DynamicResource NumberTextBoxStyle}"/>
                    <Label Content="Bottom:" />
                    <TextBox Text="{Binding WallOffsetBottom.Value}" Style="{DynamicResource NumberTextBoxStyle}"/>

                    <Label />
                    <Label />

                    <Label Content="Paint Color" FontWeight="Bold" />
                    <CheckBox IsChecked="{Binding ColorPickingEnabled.Value}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <CheckBox.Content>
                            <Image Source="../Icons/color_picker.ico" Width="16" Height="16" />
                        </CheckBox.Content>
                    </CheckBox>

                </UniformGrid>

                <xctk:ColorPicker Height="30" DisplayColorAndName="False" Padding="3" SelectedColor="{Binding SelectedColor.Value}"/>

                <UniformGrid Columns="2" VerticalAlignment="Top">

                    <Label Content="Eraser" FontWeight="Bold" />
                    <CheckBox IsChecked="{Binding EraserEnabled.Value}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <CheckBox.Content>
                            <Image Source="../Icons/eraser.ico" Width="16" Height="16" />
                        </CheckBox.Content>
                    </CheckBox>

                    <Label Content="Brush" FontWeight="Bold" />
                    <CheckBox IsChecked="{Binding PaintBrushEnabled.Value}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <CheckBox.Content>
                            <Image Source="../Icons/brush.png" Width="16" Height="16" />
                        </CheckBox.Content>
                    </CheckBox>

                </UniformGrid>
            </StackPanel>
        </ScrollViewer>

        <Grid Grid.Column="1" Grid.Row="2" Name="PixelContainer" SizeChanged="PixelContainer_OnSizeChanged" Background="DimGray">

            <ItemsControl ItemsSource="{Binding Pixels.Value}" Name="PixelGrid" Loaded="OnPixelGridLoaded" PreviewMouseMove="PixelGrid_OnPreviewMouse" PreviewMouseDown="PixelGrid_OnPreviewMouse">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid tools:GridHelpers.RowCount="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.Height.Value}"
                              tools:GridHelpers.ColumnCount="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.Width.Value}">
                        </Grid>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemContainerStyle>
                    <Style>
                        <Style.Setters>
                            <Setter Property="Grid.Row" Value="{Binding Row}" />
                            <Setter Property="Grid.Column" Value="{Binding Col}" />
                        </Style.Setters>
                    </Style>
                </ItemsControl.ItemContainerStyle>

                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type linq:XElement}">
                        <Grid Name="PixelHost">
                            <Border BorderThickness="0.2">
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding Color.Value}" />
                                </Border.Background>
                            </Border>
                            <Border Name="PixelButton" Background="Gray" Opacity="0.4" Visibility="Collapsed"/>
                        </Grid>

                        <DataTemplate.Triggers>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Path=DataContext.ColorPickingEnabled.Value}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter TargetName="PixelButton" Property="Visibility" Value="Visible" />
                                    <!--<Setter TargetName="PixelButton" Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.PickColorCommand}" />-->
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Path=DataContext.EraserEnabled.Value}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter TargetName="PixelButton" Property="Visibility" Value="Visible" />
                                    <!--<Setter TargetName="PixelButton" Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.ErasePixelCommand}" />-->
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Path=DataContext.PaintBrushEnabled.Value}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Cursor" Value="Hand" />
                                    <Setter TargetName="PixelButton" Property="Visibility" Value="Visible" />
                                    <!--<Setter TargetName="PixelButton" Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.PaintPixelCommand}" />-->
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>

                        </DataTemplate.Triggers>

                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Grid>

        <StackPanel Grid.Column="3" Grid.Row="2" Orientation="Vertical" Margin="0, 14, 14, 14">
            <Button Content="Save Level" Style="{DynamicResource ButtonStyle}" Command="{Binding Path=SaveLevelCommand}"/>
        </StackPanel>
    </Grid>
</Window>
